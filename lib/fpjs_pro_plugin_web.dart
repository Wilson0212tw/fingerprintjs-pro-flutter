import 'dart:async';
import 'dart:js_util';
// In order to *not* need this ignore, consider extracting the "web" version
// of your plugin as a separate package, instead of inlining it in the same
// package as the core of your plugin.
// ignore: avoid_web_libraries_in_flutter

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_web_plugins/flutter_web_plugins.dart';
import 'package:fpjs_pro_plugin/region.dart';

import 'js_agent_interop.dart';



/// A web implementation of the FpjsProPlugin plugin.
class FpjsProPluginWeb {
  static bool _isExtendedResult = false;
  static bool _isInitialized = false;
  static Future<FingerprintJSAgent>? _fpPromise;

  static void registerWith(Registrar registrar) {
    final MethodChannel channel = MethodChannel(
      'fpjs_pro_plugin',
      const StandardMethodCodec(),
      registrar,
    );

    final pluginInstance = FpjsProPluginWeb();
    channel.setMethodCallHandler(pluginInstance.handleMethodCall);
  }

  /// Handles method calls over the MethodChannel of this plugin.
  /// Note: Check the "federated" architecture for a new way of doing this:
  /// https://flutter.dev/go/federated-plugins
  Future<dynamic> handleMethodCall(MethodCall call) async {
    switch (call.method) {
      case 'init':
        initFpjs(call.arguments['apiToken']);
        return;
      case 'getVisitorId':
        print('test2');
        return getVisitorId(linkedId: call.arguments['linkedId']);
        // return getVisitorId(tags: call.arguments['tags'], linkedId: call.arguments['linkedId']);
      default:
        throw PlatformException(
          code: 'Unimplemented',
          details: 'fpjs_pro_plugin for web doesn\'t implement \'${call.method}\'',
        );
    }
  }


  /// Initializes the native FingerprintJS Pro client
  /// Throws a [PlatformException] if [apiKey] is missing
  static Future<void> initFpjs(String apiKey,
      {String? endpoint, Region region = Region.us, bool extendedResponseFormat = false}) async {
    _fpPromise = promiseToFuture(FingerprintJS.load(FingerprintJSOptions(apiKey: apiKey, region: region.stringValue/*, endpoint: endpoint*/)));
    // await _channel.invokeMethod('init', {
    //   'apiToken': apiKey,
    //   'endpoint': endpoint,
    //   'region': region?.stringValue,
    //   'extendedResponseFormat': extendedResponseFormat,
    //   'pluginVersion': pluginVersion,
    // });
    _isExtendedResult = extendedResponseFormat;
    _isInitialized = true;
  }

  /// Returns the visitorId generated by the native Fingerprint Pro client
  /// Support [tags](https://dev.fingerprint.com/docs/quick-start-guide#tagging-your-requests)
  /// Support [linkedId](https://dev.fingerprint.com/docs/quick-start-guide#tagging-your-requests)
  /// Throws a [FingerprintProError] if identification request fails for any reason
  static Future<String?> getVisitorId({Map<String, dynamic>? tags, String? linkedId}) async {
    if (!_isInitialized) {
      throw Exception('You need to initialize the FPJS Client first by calling the "initFpjs" method');
    }
    print(tags);
    print(linkedId);

    FingerprintJSAgent fp = await (_fpPromise as Future<FingerprintJSAgent>);
    var result = await promiseToFuture(fp.get(FingerprintJSGetOptions(linkedId: linkedId, tag: tags)));
    return result.visitorId;
  }
}
